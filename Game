float x = 300;
float y = 300;
float a = 0;
float b = 0;
float direction = 0;
float increment = 1;
float speed = 5;
boolean clockwise = true;

//Wormhole
float whx = random(600);        //wormhole x coordinate
float why = random(600);        //wormhole y coordinate
float whd = 0;                  //wormhole diameter
int growth = 0;

//blackhole
float holed = 40;               //blackhole diameter

//star arrays
float [] starx;                 //starx = star point x coordinate
float [] stary;                 //stary = star point y coordinate
float [] starex;                //starex = star ellipse x coordinate
float [] starey;                //starey = star ellipse y coordinate

//score
int score = 0;


boolean warp(){
  if (dist(x,y,whx,why) <= whd){
      return true;
    }else{
      return false;
  }
}

void blackHoleAt (float holex, float holey){
  
  fill(0);
  stroke(255);
  ellipse(holex,holey,holed,holed);
  if(dist(x,y,holex,holey) <= holed) {           //blackhole collision detector
 // Gameend();
      noLoop();      //freezes everything  
      Gameend();
  }
}

void Gameend(){
  rectMode (CENTER);
  rect(300,300,350,200);
  fill(255);
  textSize(30);
  text ("Game Over", 220,265);
  textSize(25);
  text ("Press ENTER to try again", 150, 325);
  }

void setup () {
  size (600,600);
  background (0);
  star();
  Gameend();
}

void star(){
  starx = new float [50];
  stary = new float [50];
  starex = new float [50];
  starey = new float [50];
  for (int starp = 0; starp < 50 ; starp ++){  //generates points for point coordinates
    starx [starp] = int (random (0,600));
    stary [starp] = int (random (0,600));
  }
  for (int starp = 0; starp < 50; starp ++){  //generates points for ellipse coordinates
    starex [starp] = int (random (0,600));
    starey [starp] = int (random (0,600));
  }
}

  

void draw () {
  
  
  Spacecraft();        // Function for Spacecraft movement
  Starbackground();    // Function for Starbackground
  Wallcollision();     // Function for when spacecraft collides with wall
  Wormhole();          // Function for pusulating wormhole and collision
  scoretext();         //  Function for score texts
  blackHoleAt (100,40);
  blackHoleAt (400,500);
  
  
}


void Spacecraft(){
  background(0);
   fill(255);
  x = x + speed * cos(direction);
  y = y+ speed * sin(direction);
  
  if(clockwise) {
    direction = direction + increment * 0.03;
    ellipse (x, y, 20, 20);
  }else{
    direction = direction - increment * 0.03;
    a = x + speed * cos(direction);
    b = y + speed * sin(direction);
    ellipse (a, b, 20, 20);
  }
}
  
void scoretext(){
if (score < 10){
  textSize (15);
  text( "score:000" + score, 10,590);
  }
  if ((score >= 10) && (score<100)){
    textSize(15);
    text("score:00" + score,10,590);
  }
  if ((score >= 100) && (score < 1000)){
    textSize(15);
    text("score:0" + score,10,590);
  }
  if((score >= 1000) && (score < 10000)){
    textSize(15);
    text("score:" + score, 10, 590);
  }
}
  
void Starbackground(){                   // generates random star background
  
  for (int starp = 0; starp < 50; starp++){
    stroke (255);
    point(starx [starp], stary [starp]);  
  }
  for (int starp = 0; starp < 50; starp ++){
    ellipse(starex [starp],starey [starp], 1, 1);
  }
}

void Starreset(){
  for (int starp = 0; starp < 50 ; starp ++){    //randomises the star locations
    starx [starp] = int (random (0,600));
    stary [starp] = int (random (0,600));
    starex [starp] = int (random (0,600));
    starey [starp] = int (random (0,600));
  }
}

void Wormhole(){                // creates wormhole pusulating effect
  fill(255);
  ellipse(whx,why,whd,whd);
    if (growth == 0) {          //when wormhole diameter is 0, it adds one
      whd = whd + 1;
      if ( whd > 80) {          //when wormhole diameter is 80, subtracts one
        growth = 1;
        whd = whd - 1;
      }
    }else if (growth == 1){
      whd = whd - 1;
      if (whd < 0) {
        growth = 0;
        whd = whd +1;
    }
  }
  if (warp()) {                 // When wormhole is collided against
    Starreset();                // star background resets
    score = score + 1;          // adds one to score
    whx = random(0,600);        // makes wormhole appear in another random location
    why = random(0,600);
  }
}


void Wallcollision(){ // makes spacecraft reappear on the other side when it touches the edge
  if(x < 0 ){
    x = 600 ; 
  }
  if(x>600){
    x = 0;
  }
  if(y<0){
    y = 600;
  }
  if(y>600){
    y = 0;
  }
}
  
void keyPressed(){
  //changes spacecraft direction on key press
  if((clockwise) && (key != 'w') && (key != 'a') && (key != 's') && (key != 'd')){
    clockwise = false;
  }else{
    clockwise = true;
  }
  //parallax stars
  if ((key == 'w') || (key == 'a') || (key == 's') || (key == 'd')){
    parallaxstar();
  }
   //restarts the game when enter is pressed (enter = 10)
   if (key == 10){
     restart();
  }
 
}

void restart(){    

    loop();                //all loops start working
    x = 300;               //spacecraft is set to x coordinate 300
    y = 300;                //spacecraft is set to y coordinate 300
    whx = random(0,600);    //wormhole is randomaly generated
    why = random(0,600);    //wormhole is randomly generated
    Starreset();            //stars get a new random position
    score = 0;
}


void parallaxstar(){    // creates parallaxstar movement
  for (int starp = 0; starp < 50; starp ++){
    if (key == 'w'){
      stary [starp] = stary [starp] + 1;
      starey [starp] = starey [starp] +1;
    }
      
    if (key == 'a'){
      starx [starp] = starx [starp] +1;
      starex [starp] = starex [starp] +1;
    }
      
    if (key == 's'){
      stary [starp] = stary [starp] -1;
      starey [starp] = starey [starp] -1;
    }
      
    if (key == 'd'){
      starx [starp] = starx [starp] -1;
      starex [starp] = starex [starp] -1;
    }
    starwallcollision();
  }
}
  
void starwallcollision(){        //stars appear on the other side once it goes over the edge of window
  for (int starp = 0; starp < 50; starp ++){
    if (stary [starp] > 600){
        stary [starp] = 0;
    }
    if (starey [starp] > 600){
        starey [starp] = 0;
    }
    if (starx [starp] > 600){
        starx [starp] = 0;
    }
    if (starex [starp] > 600){
        starex [starp] = 0;
    }    
    if (stary [starp] < 0){
        stary [starp] = 600;
    }
    if (starey [starp] < 0){
        starey [starp] = 600;
    }
    if (starx [starp] < 0){
        starx [starp] = 600;
    }
    if (starex [starp] < 0){
       starex [starp] = 600;
    }
    
  }
}
